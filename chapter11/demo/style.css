/* 先来个浏览器CSS RESET */
* {
    margin: 0;
    padding: 0;
}

ul {
    list-style: none;
}

header {
    background: linear-gradient(to bottom, #3a2cac, #631d9f);
    height: 280px;
    padding: 20px;
}

header nav {
    max-width: 1000px;
    margin: 0 auto;
}

header nav a {
    color: #f0f0f0;
    text-decoration: none;
}

header nav a:hover {
    color: #f90;
}

header nav .user {
    float: right;
}

/* 
    导航栏三块横向排列
    方案一：inline-block
    此方案默认元素之间会有间距
    解决方法：
        1.外层元素字体大小设置为0，内层元素字体大小设置为正常值
        2.使用注释方式将html模板中的间隙去除
*/
header nav ul {
    font-size: 0;
}

header nav ul li {
    display: inline-block;
    font-size: 16px;
    padding-right: 40px;
}

header .headerMain {
    width: 730px;
    color: #f0f0f0;
    margin: 50px auto;
}

/* 给定行高（与右侧高度一致），让其文字垂直居中 */
header .headerMain h1 {
    line-height: 62px;
}

header .headerMain .introduction {
    float: right;
}

/* 
    给banner加上关键帧动画
    声明一个动画，在任意选择器通过指定animation来使用它
    translateX为正数，向右偏移
    translateY为正数，向下偏移
    translateZ为正数，向使用者方向偏移
*/
@keyframes fadeIn {
    from {
        transform: translateY(100px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1
    }
}

.fadeIn {
    animation: fadeIn 1s;
    /* 动画结束时显示的位置 */
    animation-fill-mode: forwards;
}

.fadeInDelay {
    animation-delay: 1s;
}

/* 让最终生效的样式写在最后 */
.banner {
    width: 690px;
    padding: 20px;
    margin: 0 auto;
    margin-top: -105px;
    background-color: #f0f0f0;
    /* 无偏移值，模糊阴影8px */
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.3);
}

/* 
    由于li使用inline-block，会按照文字排版（此方式优点：适应性强，分辨率变化、元素个数变化都不影响）
    可在外层元素上加text-align进行居中
*/
.banner ul {
    font-size: 0;
    text-align: center;
}

.banner ul li {
    font-size: 16px;
    display: inline-block;
    height: 160px;
    width: 180px;
    /* background: red; */
    text-align: center;
}

.banner ul li .feature {
    margin: 20px auto;
    height: 80px;
    width: 80px;
    background: #f90;
    border-radius: 50%;
}

.main {
    margin: 100px auto;
    width: 720px;
    /* background: red; */
}

/* 行 */
.main .block {
    margin-bottom: 100px;
    margin-left: -20px;
}

/* 
    由于图片与文字之间有20px间距，现在使用的共用的blockText文字样式
    与img样式，所以给哪个加margin-left: 20px; 都会导致另一个出问题（左图右字、左字右图）
    解决方案：
        图片、文字都加上margin-left: 20px;最外层的父元素加上margin-left: -20px;来中和
        左侧的margin-left（不管左侧是文字，还是图片）
*/
.main .block .blockText {
    float: left;
    width: 260px;
    line-height: 50px;
    color: #999;
    font-size: 24px;
    margin-left: 20px;
}

.main .block .blockText h2 {
    font-size: 36px;
    margin-bottom: 30px;
}

.main .block img {
    float: left;
    width: 440px;
    height: 235px;
    margin-left: 20px;
}

/* 
    由于block内的元素都是用float导致高度塌陷
    解决方法
        1.外层dom元素使用overflow：hidden/auto
        2.使用伪元素 ::after{}
*/
.main .block::after {
    content: '';
    clear: both;
    display: block;
}

/* footer {
  font-size: 12px;
  color: #999;
  text-align: center;
} */

/* 
    固定在下方
    footer是100%的宽度
    内容是最大宽度为1000px,居中显示
*/
footer {
    position: fixed;
    bottom: 0;
    width: 100%;
    font-size: 12px;
    color: #999;
    text-align: center;
}

footer .contentFooter {
    max-width: 1000px;
    background: red;
    margin: 0 auto;
}

@keyframes rolling {
    from {
        background-position: 0 0;
    }

    to {
        background-position: 30px 0;
    }
}

.progress {
    display: none;
    position: absolute;
    width: 280px;
    height: 15px;
    left: 50%;
    top: 22px;
    /* background: red; */
    /* CSS平移、左边距都可实现居中 */
    /* transform: translateX(-50%); */
    margin-left: -140px;
    border-radius: 15px;
    /* 加边框发现，背景高度不能完全填充满元素了，只能暂时将背景高度调高 */
    border: 1px solid #999;
    background: linear-gradient(135deg, red 0%, red 33%, orange 33%, orange 66%, red 66%, red 100%);
    /* 设置背景高宽，默认背景填充不满指定元素，会使用平铺来铺满 */
    /*  */
    background-size: 30px 16px;
    /* background-repeat: no-repeat; */
    /* 动画效果一一直改变background-position的起始位置来实现 */
    /* background-position: 10px; */
    /* 指定自定义的rolling动画，动画耗时 动画与时间的关系 次数 */
    animation: rolling .6s linear infinite
}

.progress.show {
    display: block;
}


.dialogWrapper {
    display: none;
    /* 使用absolute绝对定位，height：100% 高度就为可视区域的高度，滚动条外的不算入 */
    /* 改为fixed固定定位，它会跟随窗口移动，始终固定在浏览器当前可视区域 */
    /* position: absolute; */
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    perspective: 500px;
}

.dialogWrapper.show {
    display: block;
}

/* 面罩 */
.dialogWrapper .mask {
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, .3);
}

.dialogWrapper .dialog {
    position: absolute;
    left: 50%;
    top: 50%;
    width: 500px;
    height: 300px;
    /* margin-left: -250px;
margin-top: -150px; */
    transform: translate(-50%, -50%);
    background: #fff;
}

/* 开始与x轴垂直，最后与x轴平行 */
@keyframes slideIn {
    from {
        transform: translate(-50%, -50%) rotateX(-90deg);
        /* transform: rotateX(-90deg); */
    }

    /* 
        会有一个弹的效果，在业界广泛应用
        先让其在80%的时间内移动超过指定位置，会移动回来
    */
    80% {
        transform: translate(-50%, -50%) rotateX(10deg);
    }

    to {
        transform: translate(-50%, -50%) rotateX(0deg);
        /* transform: rotateX(0deg); */
    }
}

.dialogWrapper.show .dialog {
    transform-style: preserve-3d;
    transform-origin: 50% 50%;
    /* transform: translate(-50%, -50%); */
    animation: slideIn .6s;
    /* 最后会按动画的最后状态为准（会将原来translate(-50%, -50%)代替掉，可在动画中写上） */
    animation-fill-mode: forwards;
}

.dialogWrapper .dialog .title {
    height: 50px;
    line-height: 50px;
    padding: 0 30px;
    border: 1px solid #f0f0f0;
    font-size: 20px;
}

.dialogWrapper .dialog .body {
    padding: 30px 80px
}

.dialogWrapper .dialog .body li {
    line-height: 50px;
    font-size: 20px;
}

/* label默认是行内元素，不支持给定宽度 */
.dialogWrapper .dialog .body li label {
    display: inline-block;
    width: 100px;
}

.dialogWrapper .dialog .body li input {
    font-size: 20px;
    /* 去除原有边框 */
    border: 0 none;
    border-bottom: 1px solid #ccc;
    width: 230px;
}

.dialogWrapper .dialog .body li input:focus {
    /* 去除原有聚焦样式 */
    outline: 0;
}

.dialogWrapper .dialog .body li.operateWrapper button {
    font-size: 20px;
    width: 140px;
    height: 40px;
    background: white;
    border: 1px solid #999;
    /* 增大文字间距，每个文字右侧都会右1em距离，导致看起来未居中 */
    letter-spacing: 1em;
    /* 使用文字缩进让其看起来居中 */
    text-indent: 1em;
    cursor: pointer;
    /* 每个按钮增加间距 最后一个加间距导致内容宽度大于容器宽度，换行 */
    margin-right: 50px;
}

.dialogWrapper .dialog .body li.operateWrapper {
    margin-top: 20px;
}

.dialogWrapper .dialog .body li.operateWrapper button.primary {
    background: #4990E2;
    border-color: #4990E2;
    color: white;
}

/* 覆盖最后一个按钮右侧的50px */
.dialogWrapper .dialog .body li.operateWrapper button:last-of-type {
    margin-right: 0;
}